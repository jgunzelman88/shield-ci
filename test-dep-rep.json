{
  "id": "zshamsha5lyli1d",
  "applicationName": "ossblocks",
  "date": "2023-04-18T23:07:16.720657+00:00",
  "applicationId": null,
  "vulnerabilities": [
    {
      "name": "ansi-html",
      "version": "0.0.7",
      "fixed_version": "0.0.8",
      "paths": [
        "react-scripts::webpack-dev-server::ansi-html"
      ],
      "severity": "HIGH",
      "published": "2021-08-18T17:15:00Z",
      "updated": "2022-08-04T19:26:00Z",
      "description": "This affects all versions of package ansi-html. If an attacker provides a malicious string, it will get stuck processing the input for an extremely long time.",
      "references": []
    },
    {
      "name": "ansi-regex",
      "version": "4.1.0",
      "fixed_version": "3.0.1, 4.1.1, 5.0.1, 6.0.1",
      "paths": [
        "react-scripts::jest::@jest/core::jest-validate::pretty-format::ansi-regex"
      ],
      "severity": "HIGH",
      "published": "2021-09-17T07:15:00Z",
      "updated": "2022-11-07T18:43:00Z",
      "description": "ansi-regex is vulnerable to Inefficient Regular Expression Complexity",
      "references": []
    },
    {
      "name": "async",
      "version": "2.6.3",
      "fixed_version": "2.6.4, 3.2.2",
      "paths": [
        "react-scripts::webpack-dev-server::portfinder::async"
      ],
      "severity": "HIGH",
      "published": "2022-04-06T17:15:00Z",
      "updated": "2023-02-23T20:20:00Z",
      "description": "In Async before 2.6.4 and 3.x before 3.2.2, a malicious user can obtain privileges via the mapValues() method, aka lib/internal/iterator.js createObjectIterator prototype pollution.",
      "references": []
    },
    {
      "name": "browserslist",
      "version": "4.14.2",
      "fixed_version": "4.16.5",
      "paths": [
        "react-scripts::optimize-css-assets-webpack-plugin::cssnano::cssnano-preset-default::postcss-reduce-initial::caniuse-api::browserslist"
      ],
      "severity": "MEDIUM",
      "published": "2021-04-28T16:15:00Z",
      "updated": "2021-05-05T20:15:00Z",
      "description": "The package browserslist from 4.0.0 and before 4.16.5 are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.",
      "references": []
    },
    {
      "name": "decode-uri-component",
      "version": "0.2.0",
      "fixed_version": "0.2.1",
      "paths": [
        "nanomatch::snapdragon::source-map-resolve::decode-uri-component"
      ],
      "severity": "HIGH",
      "published": "2022-11-28T13:15:00Z",
      "updated": "2023-03-30T04:15:00Z",
      "description": "decode-uri-component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS.",
      "references": []
    },
    {
      "name": "ejs",
      "version": "2.7.4",
      "fixed_version": "3.1.7",
      "paths": [
        "react-scripts::workbox-webpack-plugin::workbox-build::@surma/rollup-plugin-off-main-thread::ejs"
      ],
      "severity": "CRITICAL",
      "published": "2022-04-25T15:15:00Z",
      "updated": "2022-11-09T21:29:00Z",
      "description": "The ejs (aka Embedded JavaScript templates) package 3.1.6 for Node.js allows server-side template injection in settings[view options][outputFunctionName]. This is parsed as an internal option, and overwrites the outputFunctionName option with an arbitrary OS command (which is executed upon template compilation).",
      "references": []
    },
    {
      "name": "eventsource",
      "version": "1.1.0",
      "fixed_version": "2.0.2, 1.1.1",
      "paths": [
        "react-scripts::webpack-dev-server::sockjs-client::eventsource"
      ],
      "severity": "CRITICAL",
      "published": "2022-05-12T11:15:00Z",
      "updated": "2022-12-13T01:59:00Z",
      "description": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository eventsource/eventsource prior to v2.0.2.",
      "references": []
    },
    {
      "name": "follow-redirects",
      "version": "1.14.5",
      "fixed_version": "1.14.7",
      "paths": [
        "react-scripts::webpack-dev-server::http-proxy-middleware::http-proxy::follow-redirects"
      ],
      "severity": "HIGH",
      "published": "2022-01-10T20:15:00Z",
      "updated": "2022-10-28T17:54:00Z",
      "description": "follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor",
      "references": []
    },
    {
      "name": "follow-redirects",
      "version": "1.14.5",
      "fixed_version": "1.14.8",
      "paths": [
        "react-scripts::webpack-dev-server::http-proxy-middleware::http-proxy::follow-redirects"
      ],
      "severity": "MEDIUM",
      "published": "2022-02-09T11:15:00Z",
      "updated": "2022-02-11T20:33:00Z",
      "description": "Exposure of Sensitive Information to an Unauthorized Actor in NPM follow-redirects prior to 1.14.8.",
      "references": []
    },
    {
      "name": "glob-parent",
      "version": "3.1.0",
      "fixed_version": "5.1.2",
      "paths": [
        "react-scripts::webpack-dev-server::del::globby::fast-glob::glob-parent"
      ],
      "severity": "HIGH",
      "published": "2021-06-03T16:15:00Z",
      "updated": "2022-03-29T16:39:00Z",
      "description": "This affects the package glob-parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.",
      "references": []
    },
    {
      "name": "immer",
      "version": "8.0.1",
      "fixed_version": "9.0.6",
      "paths": [
        "react-scripts::react-dev-utils::immer"
      ],
      "severity": "CRITICAL",
      "published": "2021-09-01T18:15:00Z",
      "updated": "2021-09-10T13:33:00Z",
      "description": "This affects the package immer before 9.0.6. A type confusion vulnerability can lead to a bypass of CVE-2020-28477 when the user-provided keys used in the path parameter are arrays. In particular, this bypass is possible because the condition (p === \"__proto__\" || p === \"constructor\") in applyPatches_ returns false if p is ['__proto__'] (or ['constructor']). The === operator (strict equality operator) returns false if the operands have different type.",
      "references": []
    },
    {
      "name": "immer",
      "version": "8.0.1",
      "fixed_version": "9.0.6",
      "paths": [
        "react-scripts::react-dev-utils::immer"
      ],
      "severity": "HIGH",
      "published": "2021-09-02T12:15:00Z",
      "updated": "2022-09-10T02:46:00Z",
      "description": "immer is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
      "references": []
    },
    {
      "name": "json5",
      "version": "1.0.1",
      "fixed_version": "1.0.2, 2.2.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils::json5"
      ],
      "severity": "HIGH",
      "published": "2022-12-24T04:15:00Z",
      "updated": "2023-02-28T18:36:00Z",
      "description": "JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.",
      "references": []
    },
    {
      "name": "json5",
      "version": "2.2.0",
      "fixed_version": "1.0.2, 2.2.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils::json5"
      ],
      "severity": "HIGH",
      "published": "2022-12-24T04:15:00Z",
      "updated": "2023-02-28T18:36:00Z",
      "description": "JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). The `parse` method of the JSON5 library before and including versions 1.0.1 and 2.2.1 does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object. This vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations. This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution. `JSON5.parse` should restrict parsing of `__proto__` keys when parsing JSON strings to objects. As a point of reference, the `JSON.parse` method included in JavaScript ignores `__proto__` keys. Simply changing `JSON5.parse` to `JSON.parse` in the examples above mitigates this vulnerability. This vulnerability is patched in json5 versions 1.0.2, 2.2.2, and later.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "1.2.3",
      "fixed_version": "1.4.1, 2.0.3",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "CRITICAL",
      "published": "2022-10-12T20:15:00Z",
      "updated": "2023-02-28T15:02:00Z",
      "description": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils 2.0.0 via the name variable in parseQuery.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "1.2.3",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-11T19:15:00Z",
      "updated": "2023-02-09T01:50:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "1.2.3",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-14T16:15:00Z",
      "updated": "2023-03-30T04:15:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "1.4.0",
      "fixed_version": "1.4.1, 2.0.3",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "CRITICAL",
      "published": "2022-10-12T20:15:00Z",
      "updated": "2023-02-28T15:02:00Z",
      "description": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils 2.0.0 via the name variable in parseQuery.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "1.4.0",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-11T19:15:00Z",
      "updated": "2023-02-09T01:50:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "1.4.0",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-14T16:15:00Z",
      "updated": "2023-03-30T04:15:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "2.0.0",
      "fixed_version": "1.4.1, 2.0.3",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "CRITICAL",
      "published": "2022-10-12T20:15:00Z",
      "updated": "2023-02-28T15:02:00Z",
      "description": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils 2.0.0 via the name variable in parseQuery.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "2.0.0",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-11T19:15:00Z",
      "updated": "2023-02-09T01:50:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "2.0.0",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-14T16:15:00Z",
      "updated": "2023-03-30T04:15:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "2.0.2",
      "fixed_version": "1.4.1, 2.0.3",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "CRITICAL",
      "published": "2022-10-12T20:15:00Z",
      "updated": "2023-02-28T15:02:00Z",
      "description": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils 2.0.0 via the name variable in parseQuery.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "2.0.2",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-11T19:15:00Z",
      "updated": "2023-02-09T01:50:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the resourcePath variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "loader-utils",
      "version": "2.0.2",
      "fixed_version": "3.2.1, 2.0.4, 1.4.2",
      "paths": [
        "react-scripts::babel-loader::loader-utils"
      ],
      "severity": "HIGH",
      "published": "2022-10-14T16:15:00Z",
      "updated": "2023-03-30T04:15:00Z",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js.",
      "references": []
    },
    {
      "name": "minimatch",
      "version": "3.0.4",
      "fixed_version": "3.0.5",
      "paths": [
        "react-scripts::eslint::@humanwhocodes/config-array::minimatch"
      ],
      "severity": "HIGH",
      "published": "2022-10-17T20:15:00Z",
      "updated": "2023-03-28T17:14:00Z",
      "description": "A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.",
      "references": []
    },
    {
      "name": "minimist",
      "version": "1.2.5",
      "fixed_version": "0.2.4, 1.2.6",
      "paths": [
        "tailwindcss::detective::minimist"
      ],
      "severity": "CRITICAL",
      "published": "2022-03-17T16:15:00Z",
      "updated": "2022-04-12T16:52:00Z",
      "description": "Minimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95).",
      "references": []
    },
    {
      "name": "nanoid",
      "version": "3.1.30",
      "fixed_version": "3.1.31",
      "paths": [],
      "severity": "MEDIUM",
      "published": "2022-01-14T20:15:00Z",
      "updated": "2022-07-12T17:42:00Z",
      "description": "The package nanoid from 3.0.0 and before 3.1.31 are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.",
      "references": []
    },
    {
      "name": "node-forge",
      "version": "0.10.0",
      "fixed_version": "1.3.0",
      "paths": [
        "react-scripts::webpack-dev-server::selfsigned::node-forge"
      ],
      "severity": "HIGH",
      "published": "2022-03-18T14:15:00Z",
      "updated": "2022-03-28T13:53:00Z",
      "description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
      "references": []
    },
    {
      "name": "node-forge",
      "version": "0.10.0",
      "fixed_version": "1.3.0",
      "paths": [
        "react-scripts::webpack-dev-server::selfsigned::node-forge"
      ],
      "severity": "HIGH",
      "published": "2022-03-18T14:15:00Z",
      "updated": "2022-03-28T14:10:00Z",
      "description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
      "references": []
    },
    {
      "name": "node-forge",
      "version": "0.10.0",
      "fixed_version": "1.0.0",
      "paths": [
        "react-scripts::webpack-dev-server::selfsigned::node-forge"
      ],
      "severity": "MEDIUM",
      "published": "2022-01-06T05:15:00Z",
      "updated": "2022-01-12T20:14:00Z",
      "description": "forge is vulnerable to URL Redirection to Untrusted Site",
      "references": []
    },
    {
      "name": "node-forge",
      "version": "0.10.0",
      "fixed_version": "1.3.0",
      "paths": [
        "react-scripts::webpack-dev-server::selfsigned::node-forge"
      ],
      "severity": "MEDIUM",
      "published": "2022-03-18T14:15:00Z",
      "updated": "2022-03-28T14:20:00Z",
      "description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
      "references": []
    },
    {
      "name": "node-forge",
      "version": "0.10.0",
      "fixed_version": "1.0.0",
      "paths": [
        "react-scripts::webpack-dev-server::selfsigned::node-forge"
      ],
      "severity": "LOW",
      "published": null,
      "updated": null,
      "description": "### Impact\nThe `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.  It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.\n\n### Patches\nThe `forge.debug` API and related functions were removed in 1.0.0.\n\n### Workarounds\nDon't use the `forge.debug` API directly or indirectly with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/1-npm-node-forge/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.",
      "references": []
    },
    {
      "name": "node-forge",
      "version": "0.10.0",
      "fixed_version": "1.0.0",
      "paths": [
        "react-scripts::webpack-dev-server::selfsigned::node-forge"
      ],
      "severity": "LOW",
      "published": null,
      "updated": null,
      "description": "### Impact\nThe regex used for the `forge.util.parseUrl` API would not properly parse certain inputs resulting in a parsed data structure that could lead to undesired behavior.\n\n### Patches\n`forge.util.parseUrl` and other very old related URL APIs were removed in 1.0.0 in favor of letting applications use the more modern WHATWG URL Standard API.\n\n### Workarounds\nEnsure code does not directly or indirectly call `forge.util.parseUrl` with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at support@digitalbazaar.com\n",
      "references": []
    },
    {
      "name": "nth-check",
      "version": "1.0.2",
      "fixed_version": "2.0.1",
      "paths": [
        "react-scripts::html-webpack-plugin::pretty-error::renderkid::css-select::nth-check"
      ],
      "severity": "HIGH",
      "published": "2021-09-17T07:15:00Z",
      "updated": "2022-07-29T16:54:00Z",
      "description": "nth-check is vulnerable to Inefficient Regular Expression Complexity",
      "references": []
    },
    {
      "name": "qs",
      "version": "6.7.0",
      "fixed_version": "6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3",
      "paths": [
        "react-scripts::webpack-dev-server::express::body-parser::qs"
      ],
      "severity": "HIGH",
      "published": "2022-11-26T22:15:00Z",
      "updated": "2023-02-16T19:19:00Z",
      "description": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b&a[__proto__]&a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).",
      "references": []
    },
    {
      "name": "shell-quote",
      "version": "1.7.2",
      "fixed_version": "1.7.3",
      "paths": [
        "react-scripts::react-dev-utils::shell-quote"
      ],
      "severity": "CRITICAL",
      "published": "2021-10-21T15:15:00Z",
      "updated": "2021-10-28T13:54:00Z",
      "description": "The shell-quote package before 1.7.3 for Node.js allows command injection. An attacker can inject unescaped shell metacharacters through a regex designed to support Windows drive letters. If the output of this package is passed to a real shell as a quoted argument to a command with exec(), an attacker can inject arbitrary commands. This is because the Windows drive letter regex character class is {A-z] instead of the correct {A-Za-z]. Several shell metacharacters exist in the space between capital letter Z and lower case letter a, such as the backtick character.",
      "references": []
    },
    {
      "name": "terser",
      "version": "4.8.0",
      "fixed_version": "5.14.2, 4.8.1",
      "paths": [
        "react-scripts::workbox-webpack-plugin::workbox-build::rollup-plugin-terser::terser"
      ],
      "severity": "HIGH",
      "published": "2022-07-15T20:15:00Z",
      "updated": "2022-07-21T14:33:00Z",
      "description": "The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.",
      "references": []
    },
    {
      "name": "terser",
      "version": "5.9.0",
      "fixed_version": "5.14.2, 4.8.1",
      "paths": [
        "react-scripts::workbox-webpack-plugin::workbox-build::rollup-plugin-terser::terser"
      ],
      "severity": "HIGH",
      "published": "2022-07-15T20:15:00Z",
      "updated": "2022-07-21T14:33:00Z",
      "description": "The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.",
      "references": []
    },
    {
      "name": "url-parse",
      "version": "1.5.3",
      "fixed_version": "1.5.8",
      "paths": [
        "react-scripts::webpack-dev-server::sockjs-client::eventsource::original::url-parse"
      ],
      "severity": "CRITICAL",
      "published": "2022-02-20T13:15:00Z",
      "updated": "2023-02-23T03:15:00Z",
      "description": "Authorization Bypass Through User-Controlled Key in NPM url-parse prior to 1.5.8.",
      "references": []
    },
    {
      "name": "url-parse",
      "version": "1.5.3",
      "fixed_version": "1.5.6",
      "paths": [
        "react-scripts::webpack-dev-server::sockjs-client::eventsource::original::url-parse"
      ],
      "severity": "MEDIUM",
      "published": "2022-02-14T16:15:00Z",
      "updated": "2023-02-23T03:15:00Z",
      "description": "Authorization Bypass Through User-Controlled Key in NPM url-parse prior to 1.5.6.",
      "references": []
    },
    {
      "name": "url-parse",
      "version": "1.5.3",
      "fixed_version": "1.5.7",
      "paths": [
        "react-scripts::webpack-dev-server::sockjs-client::eventsource::original::url-parse"
      ],
      "severity": "MEDIUM",
      "published": "2022-02-17T18:15:00Z",
      "updated": "2023-02-23T03:15:00Z",
      "description": "Authorization Bypass Through User-Controlled Key in NPM url-parse prior to 1.5.7.",
      "references": []
    },
    {
      "name": "url-parse",
      "version": "1.5.3",
      "fixed_version": "1.5.9",
      "paths": [
        "react-scripts::webpack-dev-server::sockjs-client::eventsource::original::url-parse"
      ],
      "severity": "MEDIUM",
      "published": "2022-02-21T09:15:00Z",
      "updated": "2023-02-23T03:15:00Z",
      "description": "Authorization Bypass Through User-Controlled Key in NPM url-parse prior to 1.5.9.",
      "references": []
    }
  ]
}